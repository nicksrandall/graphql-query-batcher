{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap c70f840c53e89309881c","webpack:///./src/index.js"],"names":["dispatchQueueBatch","client","queue","batchedQuery","map","item","request","fetch","_url","method","headers","Accept","body","JSON","stringify","credentials","then","response","json","responses","length","Error","i","errors","reject","resolve","dispatchQueue","options","_queue","maxBatchSize","maxMatchSize","slice","QueryBatcher","url","batchInterval","shouldBatch","_options","query","variables","operationName","overrides","Object","assign","promise","Promise","push","setTimeout"],"mappings":"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","file":"GraphqlQueryBatcher.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"GraphqlQueryBatcher\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GraphqlQueryBatcher\"] = factory();\n\telse\n\t\troot[\"GraphqlQueryBatcher\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c70f840c53e89309881c","/**\n * takes a list of requests (queue) and batches them into a single server request.\n * It will then resolve each individual requests promise with the appropriate data.\n * @private\n * @param {QueryBatcher}   client - the client to use\n * @param {Array.<object>} queue  - the list of requests to batch\n */\nfunction dispatchQueueBatch(client, queue) {\n  const batchedQuery = queue.map(item => item.request);\n\n  return fetch(client._url, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(batchedQuery),\n    credentials: 'include',\n  })\n    .then(response => response.json())\n    .then(responses => {\n      if (responses.length !== queue.length) return new Error('response length did not match query length');\n\n      for (let i = 0; i < queue.length; i++) {\n        if (responses[i].errors && responses[i].errors.length) {\n          queue[i].reject(responses[i]);\n        } else {\n          queue[i].resolve(responses[i]);\n        }\n      }\n\n      return null;\n    });\n}\n\n/**\n * creates a list of requests to batch according to max batch size.\n * @private\n * @param {QueryBatcher} client - the client to create list of requests from from\n */\nfunction dispatchQueue(client, options) {\n  const queue = client._queue;\n  const maxBatchSize = options.maxMatchSize;\n\n  client._queue = [];\n\n  if (maxBatchSize > 0 && maxBatchSize < queue.length) {\n    for (let i = 0; i < queue.length / maxBatchSize; i++) {\n      dispatchQueueBatch(\n        client,\n        queue.slice(i * maxBatchSize, (i + 1) * maxBatchSize),\n      );\n    }\n  } else {\n    dispatchQueueBatch(client, queue);\n  }\n}\n\n/**\n * Create a batcher client.\n * @param {string}  url                   - The url to the graphql endpoint you are targeting.\n * @param {object}  options               - the options to be used by client\n * @param {boolean} options.shouldBatch   - should the client batch requests. (default true)\n * @param {integer} options.batchInterval - duration (in MS) of each batch window. (default 6)\n * @param {boolean} options.maxBatchSize  - max number of requests in a batch. (default 0)\n */\nexport default class QueryBatcher {\n  constructor(url, { batchInterval = 6, shouldBatch = true, maxBatchSize = 0 } = {}) {\n    this._url = url;\n    this._options = {\n      batchInterval,\n      shouldBatch,\n      maxBatchSize,\n    };\n    this._queue = [];\n  }\n\n  /**\n   * Fetch will send a graphql request and return the parsed json.\n   * @param {string}    query          - the graphql query.\n   * @param {[object]}  variables      - any variables you wish to inject as key/value pairs.\n   * @param {[string]}  operationName  - the graphql operationName.\n   *\n   * @return {promise} resolves to parsed json of server response\n   */\n  fetch(query, variables, operationName, overrides = {}) {\n    const request = { query };\n    const options = Object.assign({}, this._options, overrides);\n\n    if (variables) {\n      request.variables = variables;\n    }\n\n    if (operationName) {\n      request.operationName = operationName;\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      this._queue.push({ request, resolve, reject });\n\n      if (this._queue.length === 1) {\n        if (options.shouldBatch) {\n          setTimeout(() => dispatchQueue(this, options), options.batchInterval);\n        } else {\n          dispatchQueue(this, options);\n        }\n      }\n\n    });\n\n    return promise;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}