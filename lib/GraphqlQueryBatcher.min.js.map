{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///GraphqlQueryBatcher.min.js","webpack:///webpack/bootstrap d705960e259173bc3d6e","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","dispatchQueueBatch","client","queue","batchedQuery","map","item","request","length","fetch","_url","method","headers","Accept","Content-Type","body","JSON","stringify","credentials","then","response","json","responses","errors","reject","resolve","Error","i","dispatchQueue","options","_queue","maxBatchSize","maxMatchSize","slice","Object","defineProperty","value","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","QueryBatcher","url","_ref","arguments","undefined","_ref$batchInterval","batchInterval","_ref$shouldBatch","shouldBatch","_ref$maxBatchSize","_options","query","variables","operationName","_this","overrides","assign","promise","Promise","push","setTimeout","_this2","default"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,OAAA,yBAAAH,GACA,gBAAAC,SACAA,QAAA,oBAAAD,IAEAD,EAAA,oBAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAP,WACAS,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,QAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASL,EAAQD,GAEtB,YAQA,SAASe,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCEzDjH,QAASC,GAAmBC,EAAQC,GAClC,GAAIC,GAAeD,EAAME,IAAI,SAAAC,GAAA,MAAQA,GAAKC,SAO1C,OAJ4B,KAAxBH,EAAaI,SACfJ,EAAeA,EAAa,IAGvBK,MAAMP,EAAOQ,MAClBC,OAAQ,OACRC,SACEC,OAAQ,mBACRC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUb,GACrBc,YAAa,YAEZC,KAAK,SAAAC,GAAA,MAAYA,GAASC,SAC1BF,KAAK,SAAAG,GACJ,GAA4B,IAAxBlB,EAAaI,OACf,MAAIc,GAAUC,QAAUD,EAAUC,OAAOf,OAChCL,EAAM,GAAGqB,OAAOF,GAElBnB,EAAM,GAAGsB,QAAQH,EACnB,IAAIA,EAAUd,SAAWL,EAAMK,OACpC,MAAO,IAAIkB,OAAM,6CAGnB,KAAK,GAAIC,GAAI,EAAGA,EAAIxB,EAAMK,OAAQmB,IAC5BL,EAAUK,GAAGJ,QAAUD,EAAUK,GAAGJ,OAAOf,OAC7CL,EAAMwB,GAAGH,OAAOF,EAAUK,IAE1BxB,EAAMwB,GAAGF,QAAQH,EAAUK,GAI/B,OAAO,QASb,QAASC,GAAc1B,EAAQ2B,GAC7B,GAAM1B,GAAQD,EAAO4B,OACfC,EAAeF,EAAQG,YAI7B,IAFA9B,EAAO4B,UAEHC,EAAe,GAAKA,EAAe5B,EAAMK,OAC3C,IAAK,GAAImB,GAAI,EAAGA,EAAIxB,EAAMK,OAASuB,EAAcJ,IAC/C1B,EACEC,EACAC,EAAM8B,MAAMN,EAAII,GAAeJ,EAAI,GAAKI,QAI5C9B,GAAmBC,EAAQC,GFR9B+B,OAAOC,eAAerD,EAAS,cAC7BsD,OAAO,GAGT,IAAIC,GAAe,WAAc,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIb,GAAI,EAAGA,EAAIa,EAAMhC,OAAQmB,IAAK,CAAE,GAAIc,GAAaD,EAAMb,EAAIc,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMV,OAAOC,eAAeI,EAAQE,EAAWI,IAAKJ,IAAiB,MAAO,UAAU1C,EAAa+C,EAAYC,GAAiJ,MAA9HD,IAAYR,EAAiBvC,EAAYiD,UAAWF,GAAiBC,GAAaT,EAAiBvC,EAAagD,GAAqBhD,MEgB5gBkD,EFkED,WEjElB,QAAAA,GAAYC,GAAuE,GAAAC,GAAAC,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,MAAAE,EAAAH,EAAhEI,gBAAgEF,SAAAC,EAAhD,EAAgDA,EAAAE,EAAAL,EAA7CM,cAA6CJ,SAAAG,KAAAE,EAAAP,EAAzBpB,eAAyBsB,SAAAK,EAAV,EAAUA,CAAA7D,GAAAX,KAAA+D,GACjF/D,KAAKwB,KAAOwC,EACZhE,KAAKyE,UACHJ,gBACAE,cACA1B,gBAEF7C,KAAK4C,UF0JN,MAjEAO,GAAaY,IACXJ,IAAK,QACLT,MAAO,SEhFJwB,EAAOC,EAAWC,GAA+B,GAAAC,GAAA7E,KAAhB8E,EAAgBZ,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,MAC/C7C,GAAYqD,SACZ/B,EAAUK,OAAO+B,UAAW/E,KAAKyE,SAAUK,EAE7CH,KACFtD,EAAQsD,UAAYA,GAGlBC,IACFvD,EAAQuD,cAAgBA,EAG1B,IAAMI,GAAU,GAAIC,SAAQ,SAAC1C,EAASD,GACpCuC,EAAKjC,OAAOsC,MAAO7D,UAASkB,UAASD,WAEV,IAAvBuC,EAAKjC,OAAOtB,SACVqB,EAAQ4B,YACVY,WAAW,iBAAMzC,KAAoBC,IAAUA,EAAQ0B,eAEvD3B,IAAoBC,KAM1B,OAAOqC,MFwFNrB,IAAK,aACLT,MAAO,SEtFCwB,EAAOC,EAAWC,GAA+B,GAAAQ,GAAApF,KAAhB8E,EAAgBZ,UAAA5C,OAAA,GAAA6C,SAAAD,UAAA,GAAAA,UAAA,MACpD7C,GAAYqD,SACZ/B,EAAUK,OAAO+B,UAAW/E,KAAKyE,SAAUK,EAE7CH,KACFtD,EAAQsD,UAAYA,GAGlBC,IACFvD,EAAQuD,cAAgBA,EAG1B,IAAMI,GAAU,GAAIC,SAAQ,SAAC1C,EAASD,GACpC,GAAMtB,IACJQ,KAAM4D,EAAK5D,KACXoB,SAAWvB,UAASkB,UAASD,WAG/BI,GAAc1B,EAAQ2B,IAGxB,OAAOqC,OF8FDjB,IAGTnE,GAAQyF,QErKYtB,EFsKpBlE,EAAOD,QAAUA,EAAiB","file":"GraphqlQueryBatcher.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"GraphqlQueryBatcher\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GraphqlQueryBatcher\"] = factory();\n\telse\n\t\troot[\"GraphqlQueryBatcher\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"GraphqlQueryBatcher\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GraphqlQueryBatcher\"] = factory();\n\telse\n\t\troot[\"GraphqlQueryBatcher\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\n\t * takes a list of requests (queue) and batches them into a single server request.\n\t * It will then resolve each individual requests promise with the appropriate data.\n\t * @private\n\t * @param {QueryBatcher}   client - the client to use\n\t * @param {Array.<object>} queue  - the list of requests to batch\n\t */\n\tfunction dispatchQueueBatch(client, queue) {\n\t  var batchedQuery = queue.map(function (item) {\n\t    return item.request;\n\t  });\n\t\n\t  // if there is only one item, send it as obj and not array\n\t  if (batchedQuery.length === 1) {\n\t    batchedQuery = batchedQuery[0];\n\t  }\n\t\n\t  return fetch(client._url, {\n\t    method: 'post',\n\t    headers: {\n\t      Accept: 'application/json',\n\t      'Content-Type': 'application/json'\n\t    },\n\t    body: JSON.stringify(batchedQuery),\n\t    credentials: 'include'\n\t  }).then(function (response) {\n\t    return response.json();\n\t  }).then(function (responses) {\n\t    if (batchedQuery.length === 1) {\n\t      if (responses.errors && responses.errors.length) {\n\t        return queue[0].reject(responses);\n\t      }\n\t      return queue[0].resolve(responses);\n\t    } else if (responses.length !== queue.length) {\n\t      return new Error('response length did not match query length');\n\t    }\n\t\n\t    for (var i = 0; i < queue.length; i++) {\n\t      if (responses[i].errors && responses[i].errors.length) {\n\t        queue[i].reject(responses[i]);\n\t      } else {\n\t        queue[i].resolve(responses[i]);\n\t      }\n\t    }\n\t\n\t    return null;\n\t  });\n\t}\n\t\n\t/**\n\t * creates a list of requests to batch according to max batch size.\n\t * @private\n\t * @param {QueryBatcher} client - the client to create list of requests from from\n\t */\n\tfunction dispatchQueue(client, options) {\n\t  var queue = client._queue;\n\t  var maxBatchSize = options.maxMatchSize;\n\t\n\t  client._queue = [];\n\t\n\t  if (maxBatchSize > 0 && maxBatchSize < queue.length) {\n\t    for (var i = 0; i < queue.length / maxBatchSize; i++) {\n\t      dispatchQueueBatch(client, queue.slice(i * maxBatchSize, (i + 1) * maxBatchSize));\n\t    }\n\t  } else {\n\t    dispatchQueueBatch(client, queue);\n\t  }\n\t}\n\t\n\t/**\n\t * Create a batcher client.\n\t * @param {string}  url                   - The url to the graphql endpoint you are targeting.\n\t * @param {object}  options               - the options to be used by client\n\t * @param {boolean} options.shouldBatch   - should the client batch requests. (default true)\n\t * @param {integer} options.batchInterval - duration (in MS) of each batch window. (default 6)\n\t * @param {boolean} options.maxBatchSize  - max number of requests in a batch. (default 0)\n\t */\n\t\n\tvar QueryBatcher = function () {\n\t  function QueryBatcher(url) {\n\t    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n\t        _ref$batchInterval = _ref.batchInterval,\n\t        batchInterval = _ref$batchInterval === undefined ? 6 : _ref$batchInterval,\n\t        _ref$shouldBatch = _ref.shouldBatch,\n\t        shouldBatch = _ref$shouldBatch === undefined ? true : _ref$shouldBatch,\n\t        _ref$maxBatchSize = _ref.maxBatchSize,\n\t        maxBatchSize = _ref$maxBatchSize === undefined ? 0 : _ref$maxBatchSize;\n\t\n\t    _classCallCheck(this, QueryBatcher);\n\t\n\t    this._url = url;\n\t    this._options = {\n\t      batchInterval: batchInterval,\n\t      shouldBatch: shouldBatch,\n\t      maxBatchSize: maxBatchSize\n\t    };\n\t    this._queue = [];\n\t  }\n\t\n\t  /**\n\t   * Fetch will send a graphql request and return the parsed json.\n\t   * @param {string}    query          - the graphql query.\n\t   * @param {[object]}  variables      - any variables you wish to inject as key/value pairs.\n\t   * @param {[string]}  operationName  - the graphql operationName.\n\t   *\n\t   * @return {promise} resolves to parsed json of server response\n\t   */\n\t\n\t\n\t  _createClass(QueryBatcher, [{\n\t    key: 'fetch',\n\t    value: function fetch(query, variables, operationName) {\n\t      var _this = this;\n\t\n\t      var overrides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\t\n\t      var request = { query: query };\n\t      var options = Object.assign({}, this._options, overrides);\n\t\n\t      if (variables) {\n\t        request.variables = variables;\n\t      }\n\t\n\t      if (operationName) {\n\t        request.operationName = operationName;\n\t      }\n\t\n\t      var promise = new Promise(function (resolve, reject) {\n\t        _this._queue.push({ request: request, resolve: resolve, reject: reject });\n\t\n\t        if (_this._queue.length === 1) {\n\t          if (options.shouldBatch) {\n\t            setTimeout(function () {\n\t              return dispatchQueue(_this, options);\n\t            }, options.batchInterval);\n\t          } else {\n\t            dispatchQueue(_this, options);\n\t          }\n\t        }\n\t      });\n\t\n\t      return promise;\n\t    }\n\t  }, {\n\t    key: 'forceFetch',\n\t    value: function forceFetch(query, variables, operationName) {\n\t      var _this2 = this;\n\t\n\t      var overrides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\t\n\t      var request = { query: query };\n\t      var options = Object.assign({}, this._options, overrides);\n\t\n\t      if (variables) {\n\t        request.variables = variables;\n\t      }\n\t\n\t      if (operationName) {\n\t        request.operationName = operationName;\n\t      }\n\t\n\t      var promise = new Promise(function (resolve, reject) {\n\t        var client = {\n\t          _url: _this2._url,\n\t          _queue: [{ request: request, resolve: resolve, reject: reject }]\n\t        };\n\t\n\t        dispatchQueue(client, options);\n\t      });\n\t\n\t      return promise;\n\t    }\n\t  }]);\n\t\n\t  return QueryBatcher;\n\t}();\n\t\n\texports.default = QueryBatcher;\n\tmodule.exports = exports['default'];\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// GraphqlQueryBatcher.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d705960e259173bc3d6e","/**\n * takes a list of requests (queue) and batches them into a single server request.\n * It will then resolve each individual requests promise with the appropriate data.\n * @private\n * @param {QueryBatcher}   client - the client to use\n * @param {Array.<object>} queue  - the list of requests to batch\n */\nfunction dispatchQueueBatch(client, queue) {\n  let batchedQuery = queue.map(item => item.request);\n\n  // if there is only one item, send it as obj and not array\n  if (batchedQuery.length === 1) {\n    batchedQuery = batchedQuery[0];\n  }\n\n  return fetch(client._url, {\n    method: 'post',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(batchedQuery),\n    credentials: 'include',\n  })\n    .then(response => response.json())\n    .then(responses => {\n      if (batchedQuery.length === 1) {\n        if (responses.errors && responses.errors.length) {\n          return queue[0].reject(responses);\n        }\n        return queue[0].resolve(responses);\n      } else if (responses.length !== queue.length) {\n        return new Error('response length did not match query length');\n      }\n\n      for (let i = 0; i < queue.length; i++) {\n        if (responses[i].errors && responses[i].errors.length) {\n          queue[i].reject(responses[i]);\n        } else {\n          queue[i].resolve(responses[i]);\n        }\n      }\n\n      return null;\n    });\n}\n\n/**\n * creates a list of requests to batch according to max batch size.\n * @private\n * @param {QueryBatcher} client - the client to create list of requests from from\n */\nfunction dispatchQueue(client, options) {\n  const queue = client._queue;\n  const maxBatchSize = options.maxMatchSize;\n\n  client._queue = [];\n\n  if (maxBatchSize > 0 && maxBatchSize < queue.length) {\n    for (let i = 0; i < queue.length / maxBatchSize; i++) {\n      dispatchQueueBatch(\n        client,\n        queue.slice(i * maxBatchSize, (i + 1) * maxBatchSize),\n      );\n    }\n  } else {\n    dispatchQueueBatch(client, queue);\n  }\n}\n\n/**\n * Create a batcher client.\n * @param {string}  url                   - The url to the graphql endpoint you are targeting.\n * @param {object}  options               - the options to be used by client\n * @param {boolean} options.shouldBatch   - should the client batch requests. (default true)\n * @param {integer} options.batchInterval - duration (in MS) of each batch window. (default 6)\n * @param {boolean} options.maxBatchSize  - max number of requests in a batch. (default 0)\n */\nexport default class QueryBatcher {\n  constructor(url, { batchInterval = 6, shouldBatch = true, maxBatchSize = 0 } = {}) {\n    this._url = url;\n    this._options = {\n      batchInterval,\n      shouldBatch,\n      maxBatchSize,\n    };\n    this._queue = [];\n  }\n\n  /**\n   * Fetch will send a graphql request and return the parsed json.\n   * @param {string}    query          - the graphql query.\n   * @param {[object]}  variables      - any variables you wish to inject as key/value pairs.\n   * @param {[string]}  operationName  - the graphql operationName.\n   *\n   * @return {promise} resolves to parsed json of server response\n   */\n  fetch(query, variables, operationName, overrides = {}) {\n    const request = { query };\n    const options = Object.assign({}, this._options, overrides);\n\n    if (variables) {\n      request.variables = variables;\n    }\n\n    if (operationName) {\n      request.operationName = operationName;\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      this._queue.push({ request, resolve, reject });\n\n      if (this._queue.length === 1) {\n        if (options.shouldBatch) {\n          setTimeout(() => dispatchQueue(this, options), options.batchInterval);\n        } else {\n          dispatchQueue(this, options);\n        }\n      }\n\n    });\n\n    return promise;\n  }\n\n  forceFetch(query, variables, operationName, overrides = {}) {\n    const request = { query };\n    const options = Object.assign({}, this._options, overrides);\n\n    if (variables) {\n      request.variables = variables;\n    }\n\n    if (operationName) {\n      request.operationName = operationName;\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      const client = {\n        _url: this._url,\n        _queue: [{ request, resolve, reject }],\n      };\n\n      dispatchQueue(client, options);\n    });\n\n    return promise;\n  }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js"],"sourceRoot":""}